#!/usr/bin/env perl
use v5.36;
use open ':std', ':encoding(UTF-8)';
use Data::Printer;
use File::stat;
use Getopt::Long::Descriptive;
use AnyEvent;
use Path::Tiny;

my ($opt, $usage) = describe_options(
    'Usage: %c %o [-f FILE | -t TITLE]',
    [ mode => [
        ['file|f=s',  'Filename'],
        ['title|t=s', 'Title of the file'],
    ], { required => 1 }],
    ['help|h', 'Print this message',  { shortcircuit => 1 }],
);

$usage->die if $opt->help;

# User must supply either "--file" or "--title"
# The other option is then generated from specified parameter
my ($file, $title);
if ( $opt->mode eq 'file' ) {
    $file  = $opt->file;
    $title = $file;

    # remove file ending
    $title =~ s/[.][^\.]+\z//;
    # substitute - with spaces
    $title =~ s/-/ /g;
}
else {
    $title = $opt->title;
    $file  = $title;

    # lower case file
    $file = lc $file;
    # replace spaces with -
    $file =~ s/\s+/-/g;
    # add file ending
    $file .= '.md';
}

# when file does not exists or is empty
if ( not -e $file  or  -s $file == 0 ) {
    # then create file with markdown title
    path($file)->spew_utf8(sprintf "# %s\n", $title);
}

# Build pandoc command to create pdf
my $output = $file =~ s/\.[^\.]+\z/.pdf/r;
my $create_pdf = sub {
    printf "Generating pdf '%s' -> '%s'\n", $file, $output;
    system('pandoc', $file, '-o', $output);
    return;
};

# Create/Update PDF
$create_pdf->();

# spawn gedit and evince
$SIG{CHLD} = 'IGNORE';
spawn_child(sub { exec('evince', $output) });
spawn_child(sub { exec('gedit',  $file)   });

# Poll for file changes and recreate PDF when file changed
my $wait       = AnyEvent->condvar;
my $last_mtime = stat($file)->mtime;

my $timer = AnyEvent->timer(
    after    => 0,
    interval => 0.5,
    cb       => sub {
        my $mtime = stat($file)->mtime;
        if ( $mtime != $last_mtime ) {
            $last_mtime = $mtime;
            $create_pdf->();
        }
    },
);

$wait->recv;

# Spawns a child Process
sub spawn_child($code) {
    defined(my $pid = fork()) || die "Cannot fork: !$\n";

    # child executes code-ref then aborts.
    if ( $pid == 0 ) {
        $code->();
        exit;
    }

    return;
}

=pod

=head1 watch_markdown

This program creates or watches a file for changes and creates a
PDF from it (with pandoc) whenever it changes. It opens 'gedit'
for editing the file. And 'evince' for showing the PDF.

=head1 USAGE

watch_markdown --file hello-world.md

    When file exists, will open the file "hello-world.md"
    When file not exists, will create file with content "# hello world".

watch_markdiown --title "Hello World"

    Assumes a file named "hello-world.md"

    When file exists, program watches for changes.
    When file not exists, will create file with the provided title.


=head1 File/Title generation

When only a title is provided the filename is generated by lowercasing
the whole title. Replacing all whitespace with a dash '-' and then
adding '.md' as a filename.

When providing the filename all operations a reversed. Replacing
dashes with a space and removing any file ending.

=head1 IMPROVEMENTS

* create temp PDF and delete it when program stops.
