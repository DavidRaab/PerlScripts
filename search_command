#!/usr/bin/env perl
use 5.036;
use utf8;
use open ':std', ':encoding(UTF-8)';
use Getopt::Long::Descriptive;
use Path::Tiny;
use Sq -sig => 1;

my ($opt, $usage) = describe_options(
    'Usage: search_command REGEX [--full]',
    ['full|f', 'Print Full Paths',   {default => 0}],
    ['help|h', 'Print this message', {shortcircuit => 1}],
);

print($usage->text) && exit if $opt->help;
print($usage->text) && exit if not defined $ARGV[0];

# Precompile regex
# - This way program aborts when regex is mailformed instead of continuing
# - and running the program
my $search = qr/$ARGV[0]/i;

# Get all binaries in PATH that match passed Regex
my $binaries =
    # split $ENV{PATH} on :
    Str->split(qr/:/, $ENV{PATH})->to_seq
    # get children of every PATH that match $search regex
    ->bind(sub($x) { seq { path($x)->children($search) } })
    # only files and executables
    ->keep(sub($x) { $x->is_file && $x->stat->mode & 0111 }) ## no critic
    # Schwartzian Transformation
    ->map( sub($x) { [$x, $x->basename] })
    # sort by basename
    ->sort(sub($x,$y) { $x->[1] cmp $y->[1] });

# prints full-path, usually useful when command exists multiple times
if ( $opt->full ) {
    $binaries->iter(sub($x) {
        say fst $x;
    });
}
# by default - only print basename of binaries (single-time)
else {
    $binaries->map(\&snd)->distinct->iter(sub($x) {
        say $x;
    });
}

=pod

=head1 search_command

Searches for a command in your PATH Environment by giving it a REGEX. Its useful
when you don't know the exact command but parts of it. REGEX is case-insensitive
by default.

=head1 EXAMPLES

=begin text

    $ search_command wayland
      Xwayland
      es2gears_wayland
      es2gears_wayland.x86_64-linux-gnu
      wayland-scanner

    $ search_command wacom
      xsetwacom

    $ search_command wacom --full
      /usr/bin/xsetwacom
      /bin/xsetwacom

=end text
