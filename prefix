#!/usr/bin/env perl
use v5.32;
use warnings;
use feature 'signatures';
no warnings 'experimental::signatures';
use Carp qw(croak);
use FindBin;
use lib "$FindBin::RealBin";
use Color qw(red blue cyan);

# Program info
say 'Call: ' . red('prefix *.mp3');
say 'This tool prefixes all filenames provided as arguments.';
say 'If Prefix is a number like ' . red('5') . ' it wil rename a file to: ' . red('05. filename.mp3');
print "Valid inputs: [Integer] s(kip) r(emove) q(uit)\n\n";

# Main
FILE:
for my $file (@ARGV) {
    # Skip Directories and non-existing files
    next if     -d $file;
    next if not -e $file;

    # Show User the file to Change
    printf "File: %s\n", blue($file);

    # Warn user if file has prefix
    if ( check_has_prefix($file) ) {
        print red("Warning: ") . "Prefix already avaible. Enter Number to overwrite or skip\n";
    }

    ASKINPUT:
    my $input = to_input(ask("Prefix: "));
    match_input($input, {
        'number'  => sub {
            my ($value) = @_;
            my $new_filename = new_filename($value, $file);

            # If new-file already exists, we skip
            if ( -e $new_filename ) {
                printf "Error: No renaming; File already exists: %s\n", $new_filename;
            }
            else {
                rename($file, $new_filename)
                    ? printf "Renamed: %s -> %s\n\n", blue($file), cyan($new_filename)
                    : printf red("Error: ") . $! . "\n";
            }
        },
        'skip'    => sub { printf "Skipped: %s\n\n", blue($file) },
        'quit'    => sub { exit },
        'invalid' => sub {
            printf red("Error:") . " Input invalid: Provide [number] s(kip) or q(uit)\n";
            goto ASKINPUT;
        },
    });
}


sub ask ($message) {
    print $message;
    my $input = <STDIN>;
    chomp $input;
    return $input;
}

sub check_has_prefix ($str) {
    return $str =~ m/^\d+\.\s+/ ? 1 : 0;
}

sub remove_prefix ($str) {
    $str =~ s/^\d+\.\s+//;
    return $str;
}

sub new_filename ($number, $file) {
    return
        check_has_prefix($file)
        ? sprintf("%02d. %s", $number, remove_prefix($file))
        : sprintf("%02d. %s", $number, $file)
        ;
}

## Input Data Structure
#
# Transform input into four possible states:
# Either into a number, skip, quit or invalid represented as an array.
# First entry represents the type, second the value. Examples:
#
# ["number", "05"]
# ["skip"]
# ["quit"]
# ["invalid"]
sub to_input ($prefix) {
    return check_is_number($prefix) ? ["number", sprintf("%02d. ", $prefix)]
    :      check_is_skip($prefix)   ? ["skip"]
    :      check_is_quit($prefix)   ? ["quit"]
    :                                 ["invalid"]
    ;
}

sub check_is_number ($input) {
    return $input =~ m/^\d+$/ ? 1 : 0;
}

sub check_is_skip ($input) {
    return $input =~ m/^(s|sk|ski|skip)$/i ? 1 : 0;
}

sub check_is_quit ($input) {
    return $input =~ m/^(q|qu|qui|quit)$/xi ? 1 : 0;
}


# Return type of input data-structure
sub input_type ($input) {
    return $input->[0];
}

# Return additional values of each type
sub input_values ($input) {
    my $length = $input->$#*;
    my @array  = $input->@[1..$length];
    return wantarray ? @array : \@array;
}

# Match function to check all cases if input data-structure
sub match_input ($input, $args) {
    croak "Need Hash-Ref as second argument\n"     if ref $args            ne 'HASH';
    croak "Need 'number' as function argument"     if ref $args->{number}  ne 'CODE';
    croak "Need 'skip' as function argument\n"     if ref $args->{skip}    ne 'CODE';
    croak "Need 'quit' as function argument\n"     if ref $args->{quit}    ne 'CODE';
    croak "Need 'invalid' as function argument\n"  if ref $args->{invalid} ne 'CODE';

    my $type   = input_type($input);
    my @values = input_values($input);
    $args->{$type}(@values);
}
