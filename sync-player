#!/usr/bin/env perl
use v5.32;
use warnings;
use FindBin;
use lib "$FindBin::RealBin";
use Color qw(red blue cyan);
use Data::Printer;
use Path::Class qw(file dir);
use File::Copy::Recursive qw(fcopy pathmk);
use List::Util qw(reduce);
require SyncConfig;
use Getopt::Long;

# Todo:
# * Include/Exclude in Config
# * Regex Pattern Matching in File Config
# * Copy Amount / Size Usage
# * Term::ProgressBar

my $force = 0;
GetOptions(
    "f|force" => \$force,
) or die "Error in command line arguments\n";

# All changes
my @changes = map { $_->diff } SyncConfig::config();

# get count of each operation
my $amount = reduce {
    $b->match(
        COPY   => sub { $a->{Copies}++;    $a },
        DELETE => sub { $a->{Deletions}++; $a },
    );
} {Copies => 0, Deletions => 0}, @changes;


# split operations into copy/delete
my $ops = reduce {
    $b->match(
        COPY   => sub { push @{$a->{Copies}},    $b; $a },
        DELETE => sub { push @{$a->{Deletions}}, $b; $a },
    );
} {Copies => [], Deletions => []}, @changes;

# Re-Order operations by Deletions first
@changes = ( @{$ops->{Deletions}}, @{$ops->{Copies}} );


# Start Program by Summary
print  "Summary\n";
printf "Copies:    %d\n",   $amount->{Copies};
printf "Deletions: %d\n\n", $amount->{Deletions};

for my $op ( @changes ) {
    $op->match(
        COPY => sub {
            printf "%s %s => %s\n", red("Copying"), blue($op->src), cyan($op->dst);
            if ( $force ) {
                fcopy($op->src, $op->dst) or warn "WARNING: $!\n";
            }
        },
        DELETE => sub {
            printf "%s %s\n", red("Deleting"), blue($op->file);
            if ( $force ) {
                $op->file->remove or warn "WARNING: $!\n";
            }
        },
    );
}

if ( not $force ) {
    print red("\nNo Copy/Delete has been done. Pass --force to do real work.\n");
}

# Program End


### Classes
BEGIN {
    package Delete;
    use Moose;
    has 'file' => (is => 'ro', isa => 'Path::Class::File', required => 1);
    sub match {
        my ($self, %attr) = @_;
        $attr{DELETE}->($self);
    }

    package Copy;
    use Moose;
    has 'src' => (is => 'ro', isa => 'Path::Class::File', required => 1);
    has 'dst' => (is => 'ro', isa => 'Path::Class::File', required => 1);
    sub match {
        my ($self, %attr) = @_;
        $attr{COPY}->($self);
    }

    package Synchronize;
    use Moose;
    use feature 'signatures';
    no warnings 'experimental::signatures';
    use Path::Class;
    use Types::Standard qw(Enum InstanceOf ArrayRef Str);
    use Type::Params qw(compile);
    use Moose::Util::TypeConstraints;

    subtype 'SyncMethods', as Enum[qw/Flat Recursive/];
    subtype 'SyncFiles',   as ArrayRef[Str];

    has 'source'      => ( is => 'ro', required => 1, isa => 'Path::Class::Dir' );
    has 'destination' => ( is => 'ro', required => 1, isa => 'Path::Class::Dir' );
    has 'method'      => ( is => 'ro', required => 1, isa => 'SyncMethods | SyncFiles' );

    # returns full path of every file from a directory
    state sub recursive_files ($dir) {
        my $content = [];
        if ( -d $dir ) {
            $content = $dir->traverse(sub {
                my ($x, $cont, $content) = @_;

                # if file, push to content
                if ( -f $x ) {
                    push @$content, {
                        File =>    $x,
                        Size => -s $x,
                    };
                }
                # otherwise traverse recursively
                else {
                    $cont->($content);
                }

                return $content;
            }, []);
        }
        return $content;
    }

    state sub flat_files ($dir) {
        my @content;
        if ( -d $dir ) {
            while ( my $x = $dir->next ) {
                push @content, {
                    File =>    $x,
                    Size => -s $x,
                } if -f $x;
            }
        }
        return \@content;
    }

    state sub files_files ($dir, $files) {
        my @content;
        if ( -d $dir ) {
            for my $file ( $files->@* ) {
                my $file = $dir->file($file);
                if ( -f $file ) {
                    push @content, {
                        File =>    $file,
                        Size => -s $file,
                    }
                }
            }
        }
        return \@content;
    }

    sub source_files ($self) {
        if ( $self->method eq 'Flat' ) {
            return flat_files($self->source);
        }
        elsif ( $self->method eq 'Recursive' ) {
            return recursive_files($self->source);
        }
        else {
            return files_files($self->source, $self->method);
        }
    }

    sub destination_files ($self) {
        return recursive_files($self->destination);
    }

    sub diff ($self) {
        # Changes operation
        my @changes;

        # Fetch file list only once
        my $src = RelativeFolder->from_absolute(
            root  => $self->source,
            files => $self->source_files,
        );
        my $dst = RelativeFolder->from_absolute(
            root  => $self->destination,
            files => $self->destination_files,
        );

        # Which files should be deleted from DST
        for my $file ( $dst->all_files ) {
            if ( not defined $src->find_file($file->{File}) ) {
                push @changes, Delete->new(file => $dst->root->file($file->{File}));
            }
        }

        # Look which files should be copied from SRC to DST
        for my $src_file ( $src->all_files ) {
            my $file = $src_file->{File};
            my $size = $src_file->{Size};
            my $copy = Copy->new(
                src => $src->root->file($file),
                dst => $dst->root->file($file),
            );

            # Look if file exists in dst
            my $dst_file = $dst->find_file($file);
            # if file exists
            if ( defined $dst_file ) {
                # but file size is different, then copy
                if ( $dst_file->{Size} != $size ) {
                    push @changes, $copy;
                }
            }
            # if not in dst, also copy
            else {
                push @changes, $copy;
            }
        }

        return wantarray ? @changes : \@changes;
    }


    package RelativeFolder;
    use Moose;
    use Types::Standard qw(InstanceOf ArrayRef Dict Int);
    use Type::Params qw(compile_named);

    has 'root' => (
        is       => 'ro',
        isa      => InstanceOf['Path::Class::Dir'],
        required => 1,
    );

    has 'files' => (
        traits   => ['Array'],
        is       => 'ro',
        isa      => ArrayRef[Dict[File => InstanceOf['Path::Class::File'], Size => Int]],
        required => 1,
        handles  => {
            all_files  => 'elements',
            first_file => 'first',
        }
    );

    sub find_file {
        my ( $self, $file ) = @_;
        return $self->first_file(sub { $_->{File} eq $file });
    }

    # Class Method
    sub from_absolute {
        state $check = compile_named(
            { head => 1 },
            root  => InstanceOf['Path::Class::Dir'],
            files => ArrayRef[Dict[File => InstanceOf['Path::Class::File'], Size => Int]],
        );
        my ( $class, $arg ) = &$check;

        return RelativeFolder->new({
            root  => $arg->{root},
            files => [ map +{
                File => $_->{File}->relative($arg->{root}),
                Size => $_->{Size},
            }, @{$arg->{files}} ],
        });
    }
}

