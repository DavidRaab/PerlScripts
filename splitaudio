#!/usr/bin/env perl
use v5.32;
use warnings;
use feature 'signatures';
no warnings 'experimental::signatures';
use File::Slurp qw(read_file);
use Parallel::ForkManager;
use Data::Dump qw(dump);
use Capture::Tiny qw(capture);
use Getopt::Long::Descriptive;

my ($opt, $usage) = describe_options(
    'Usage: splitaudio -a audio-file -s split-file',
    ['audio|a=s', 'The audio file to be processed',                           { required => 1 }],
    ['split|s=s', 'The split file containing timesteps and song information', { required => 1 }],
    ['info|i',    'Show what will be done, without action'                                      ],
    ['help|h',    'Print this message',                                       { shortcircuit => 1 }],
);

if ( $opt->help ) {
    print $usage->text;
    exit;
}

die (sprintf "Error: Audio file [%s] does not exists.\n", $opt->audio) if not -e $opt->audio;
die (sprintf "Error: Split file [%s] does not exists.\n", $opt->split) if not -e $opt->split;

# 00:12:33 Artist - Title
my $format1 = qr/\A \[? ( (?:\d\d:)? \d\d:\d\d) \]? (?:\s+-)? \s+ ([^-]+) \s+ - \s+ (.+) \z/xms;
# 00:12:33 Title
my $format2 = qr/\A \[? ( (?:\d\d:)? \d\d:\d\d) \]? (?:\s+-)? \s+ (.+) \z/xms;

# Read Songs File Format
my @songs;
my @txt = read_file($opt->split, chomp => 1);

for my $line ( @txt ) {
    if ( $line =~ $format1 ) {
        push @songs, { Start => $1, Artist => $2, Title => $3 };
    }
    elsif ( $line =~ $format2 ) {
        push @songs, { Start => $1, Title => $2 };
    }
    else {
        die "Cannot read TXT Format\n";
    }
}

# Read "Stop" Attribute in extra step - because easier!
for ( my $i=1; $i < @txt; $i++ ) {
    if ( $txt[$i] =~ $format1 ) {
        $songs[$i-1]->{Stop} = $1;
    }
    elsif ( $txt[$i] =~ $format2 ) {
        $songs[$i-1]->{Stop} = $1;
    }
}

# If user requested informtion
if ( $opt->info ) {
    my $num = 1;
    for my $song ( @songs ) {
        if ( exists $song->{Stop} ) {
            printf "%02d: %s - %s - %s\n", $num++, $song->{Start}, $song->{Stop}, $song->{Title};
        }
        else {
            printf "%02d: %s - EOF - %s\n", $num++, $song->{Start}, $song->{Title};
        }
    }
}
# otherwise convert Audio Files
else {
    my $pm = Parallel::ForkManager->new(4);
    SONG:
    for (my $i=0; $i < @songs; $i++ ) {
        my $pid = $pm->start and next SONG;

        # Child Process
        my $song  = $songs[$i];
        my $track = $i + 1;

        convert(
            Audio  => $opt->audio,
            Start  => $song->{Start},
            Stop   => $song->{Stop},
            Track  => $track,
            Artist => $song->{Artist},
            Title  => $song->{Title},
        );

        # Exit Child
        $pm->finish;
    }

    print "Finished!\n";
}

# Mandatory: Audio, Start, Track, Title
# Optional:  Stop, Artist
my $time_format;
BEGIN { $time_format = qr/\A( (?:\d\d:)? \d\d:\d\d)\z/xms; }
sub convert (%arg) {
    my $audio    = $arg{Audio} // die "Audio not defined!\n";
    my ($start)  = defined $arg{Start} && $arg{Start} =~ $time_format;
    my ($stop)   = defined $arg{Stop}  && $arg{Stop}  =~ $time_format;
    my ($track)  = defined $arg{Track} && $arg{Track} =~ m/\A(\d+)\z/;
    my $title    = $arg{Title} // die "Title not defined!\n";

    my $out_file =
        defined $arg{Artist}
        ? sprintf("%02d. %s - %s.ogg", $track, $arg{Artist}, $arg{Title})
        : sprintf("%02d. %s.ogg",      $track, $arg{Title});

    if ( exists $arg{Stop} && defined $arg{Stop} && $arg{Stop} =~ $time_format ) {
        my $out = capture sub {
            system(
                'ffmpeg',
                '-i'   => $arg{Audio},
                '-ss'  => $arg{Start},
                '-to'  => $arg{Stop},
                '-q:a' => 8,
                $out_file,
            );
        };
    }
    else {
        my $out = capture sub {
            system(
                'ffmpeg',
                '-i'   => $arg{Audio},
                '-ss'  => $arg{Start},
                '-q:a' => 8,
                $out_file,
            );
        };
    }
}
