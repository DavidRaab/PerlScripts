#!/usr/bin/env perl
use v5.36;
use open ':std', ':encoding(UTF-8)';
use Path::Tiny;
use Digest::SHA qw(sha512_hex);
use Data::Printer;
use Getopt::Long::Descriptive;
use Sq;

## WHAT IT DOES
#
# This program recursively scans all files from the current working directory.
# It gathers filesizes of all files. If there exists more than one file of the
# same size the SHA512 is computed for its first 4 KiB of content.
#
# When this content is the same, file is considered a duplicate. This is not
# exactly true, but yields into fast possible results. As file-size and first
# 4 kiB must match.
#
# By default it just prints possible duplicated matches, and does nothing besides
# that. So it is up to you to decide if those files are duplicates or not.
#
# If a deduplication folder is given, then the program turns into an interactive
# application. It first asks if a given set of files should be deduplicated. If
# user chooses "yes". Then the program ask for the filename it should keep.
#
# Then it will copy the first file to the given deduplucation folder and creates
# symlinks from the old files to the new copied deduplicated file.

## TODO
# + Extend Deduplication logic to full file, not just first 4 KiB
# + When one of the duplicated file is already in the deduplication folder
#   then this needs special care. Then we don't need to ask the user which
#   filename should be keeped.
# + Add some colors and newlines for interactive prompt

### Argument Parsing

my ($opt, $usage) = describe_options(
    'Usage: %c %o',
    ['min|m=s',    'Minimum file-size, like: 1, 1k, 1m, .3m, 1.5m'],
    ['folder|f=s', 'De-Duplication folder'],
    ['help|h',     'Print this message', {shortcircuit => 1}],
);

$usage->die if $opt->help;

# check if folder exists and turn it into a Path::Tiny object
my $dedup;
if ( $opt->folder ) {
    $dedup = path($opt->folder);
    die "De-Duplication Folder does not exists.\n" if not $dedup->is_dir;
}

# read minimum
my $min;
if ( $opt->min ) {
    my $num = qr/ \d+ | \.\d+ | \d+\.\d+ /xms;
    if ( $opt->min =~ m/\A ($num) \s* \z/xms ) {
        $min = $1;
    }
    elsif ( $opt->min =~ m/\A ($num) \s* ([km]) \s* \z/xmsi ) {
        $min =
            $2 eq 'k'
            ? $1 * 1024
            : $1 * 1024 * 1024;
    }
    else {
        die "Unsupported minimum. Specify integer optionally followed by [km]\n";
    }
}

### Finding Duplicates

# files grouped by file-size
my $file = path('.')->visit(sub($path, $state) {
    # skip directories and links
    return if -d $path || -l $path;
    # skip if file is smaller than minimum (if specified)
    return if $min && $path->size < $min;

    # When Hash::push is used. Then created array is also blessed in "Array" package
    Hash::push($state, $path->size, $path);
}, { recurse => 1 });

# add Hash blessing to $file
Hash->bless($file);

# $file has the structure
# { FILESIZE => [FILE] }

# only keep those entries that has more than 1 file per size
$file = $file->filter(sub($size, $files) {
    return $files->count > 1 ? 1 : 0;
});

# go through [FILE] and turn them into { SHA512 => [FILE] }
$file = $file->map(sub($size, $files) {
    return $size, $files->group_by(sub($file) {
        sha512_hex(read_bytes($file, 4096))
    });;
});

# $file now has the structure
# { FILESIZE => { SHA512 => [FILE] } }

# only keep entries that has more than one file per SHA512
$file = $file->map(sub($size, $sha) {
    return $size, $sha->filter(sub($sha, $files) {
        return @$files > 1 ? 1 : 0
    });
});

# only keep file sizes that has some entries in it
$file = $file->filter(sub($size, $sha) {
    return $sha->count > 0 ? 1 : 0;
});


### Action
if ( $dedup ) {
    do_dedup($file);
}
else {
    print_potential_duplicates($file);
}


## Functions

# returns $count bytes of file, defaults to 4Kib (usually file-systems smallest unit)
sub read_bytes($path, $count=4096) {
    my $fh = $path->openr_raw;
    my $content;
    read $fh, $content, $count;
    return $content;
}

sub ask($message) {
    $message =~ s/\s*$/ /xmsi;
    print $message;
    my $input = <STDIN>;
    if ( $input =~ m/\A ( y | ye | yes ) $/xmsi ) {
        return 1;
    }
    return;
}

sub choose($message, $error, $validator) {
    START:
    print $message;
    my $input = <STDIN>;
    chomp $input;
    my $result = $validator->($input);
    if ( $result ) {
        return $result;
    }
    else {
        say $error;
        goto START;
    }
}

sub choose_range_or_string($message, $error, $min, $max) {
    choose($message, $error, sub($input) {
        # if integer provided
        if ( $input =~ m/\A \s* (\d+) \s* \z/xms ) {
            # check if in range
            if ( $1 >= $min && $1 <= $max ) {
                return [RANGE => $1];
            }
            else {
                return;
            }
        }
        # everything not an integer is accepted as-is
        else {
            return [STRING => $input];
        }
    });
}

sub print_potential_duplicates($data) {
    for my $size ( $data->keys->sort_num->expand ) {
        $data->{$size}->iter(sub($sha, $files) {
            printf "SHA512 %s - %d bytes\n", $sha, $size;
            $files->iter(sub($file) {
                say $file;
            });
            print "\n";
        });
    };
}

sub make_link($source, $destination) {
    $source = $source->absolute;
    my $cwd = Path::Tiny->cwd;

    chdir($destination->parent)
        or die "Cannot chdir: $!\n";
    symlink($source->relative, $destination->basename)
        or die "Cannot create symlink: $!\n";

    chdir($cwd);
}

sub do_dedup($data) {
    for my $size ( sort { $a <=> $b } keys %$data ) {
        $data->{$size}->iter(sub($sha, $files) {
            # prints duplicated files to user
            printf "File-Size: %d bytes\n", $size;
            $files->iteri(sub($file, $idx) {
                printf "  %02d. %s\n", $idx+1, $file;
            });

            if ( ask("De-Duplicate? [yes/no*]") ) {
                # as all files should be duplicates, i always pick the first.
                my $keep = $files->[0];

                # we ask the user which file to keep to pick the filename for the target
                TARGET:
                my $count = $files->count;
                my $input = choose_range_or_string(
                    (sprintf "Keep [1-%d/filename]: ", $count),
                    (sprintf "Provide an integer in range 1-%d or a filename", $count),
                    1,
                    $count
                );

                # Build target
                my $target =
                    $input->[0] eq 'RANGE'
                    ? path($dedup, $files->[$input->[1] - 1]->basename)
                    : path($dedup, $input->[1]);

                # when target exists re-ask for another target
                if ( -e $target ) {
                    say 'Error: Target already exists';
                    goto TARGET;
                }

                # Actual Copy Logic
                # printf "COPY '%s' -> '%s'\n", $keep, $target;
                if ( $keep->copy($target) ) {
                    $files->iter(sub($file) {
                        $file->remove;
                        make_link($target, $file);
                    });
                }
                else {
                    die "Copy failed: $!\n";
                }
            }
        });
    }
}
